<?php namespace modules\ui\widgets;

// "Keep the essence of your code, code isn't just a code, it's an art." -- Rifan Firdhaus Widigdo
use yii\base\Widget;
use yii\helpers\Html;
use yii\base\InvalidConfigException;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;

/**
 * @author Rifan Firdhaus Widigdo <rifanfirdhaus@gmail.com>
 */
class Menu extends Widget
{
    /**
     * @var array
     * - label
     * - url
     * - options
     * - linkOptions
     * - subMenuOptions
     * - items
     * - icon
     * - iconOptions
     */
    public $items = [];
    public $options = [];
    public $subMenuOptions = [];
    public $linkOptions = [];
    public $itemOptions = [];
    public $activateItems = true;
    public $activateParents = false;
    public $hideEmptyItems = false;
    public $activeCssClass = 'active';
    public $hasChildrenClass = 'has-children';
    public $route;
    public $params;
    public $encodeLabels = true;
    public $active;
    public $defaultUrl = '#';
    public $hideLabel = false;

    public function init()
    {
        if (!isset($this->options['id'])) {
            $this->options['id'] = $this->id;
        }

        $this->options['data-rid'] = $this->getRealId();

        parent::init(); // TODO: Change the autogenerated stub
    }

    /** @inheritdoc */
    public function run()
    {
        parent::run();

        $items = $this->normalizeItems($this->items);

        $menuTag = ArrayHelper::remove($this->options, 'tag', 'ul');

        return Html::tag($menuTag, $this->renderItems($items), $this->options);
    }

    /**
     * @param array $items
     * @param null  $parent
     *
     * @return array
     */
    public function normalizeItems($items, $parent = null)
    {
        $defaultOrder = 0;

        foreach ($items AS $key => $item) {
            if (is_string($item)) {
                $item = $items[$key] = ['label' => $item];
            }

            $items[$key] = $item = ArrayHelper::merge([
                'linkOptions' => [],
                'subMenuOptions' => [],
                'label' => '',
                'options' => [],
                'linkHtmlAttribute' => 'href',
            ], $item);

            $hideEmptyIfNeeded = ((empty($item['items']) || empty($item['url'])) && $this->hideEmptyItems);

            if (isset($item['visible']) && !$item['visible'] || $hideEmptyIfNeeded) {
                unset($items[$key]);

                continue;
            }

            if (!isset($item['url'])) {
                $items[$key]['url'] = $this->defaultUrl;
            }

            $items[$key]['__id'] = is_null($parent) ? $key : $parent . '/' . $key;

            if (!isset($item['order'])) {
                $items[$key]['order'] = $defaultOrder;
            }

            if (isset($item['items'])) {
                $items[$key]['items'] = $this->normalizeItems($item['items'], $items[$key]['__id']);
            }

            if (isset($item['encode']) && $item['encode'] || (!isset($item['encode']) && $this->encodeLabels)) {
                $items[$key]['label'] = Html::encode($item['label']);
            }

            $defaultOrder++;
        }

        ArrayHelper::multisort($items, function ($item) {
            return $item['order'];
        });

        return $items;
    }

    /**
     * @param array $items
     *
     * @return string
     * @throws InvalidConfigException
     */
    public function renderItems($items)
    {
        $itemsHtml = '';

        foreach ($items AS $item) {
            $itemHtml = '';
            $linkOptions = ArrayHelper::merge($this->linkOptions, $item['linkOptions']);
            $linkTag = ArrayHelper::remove($linkOptions, 'tag', 'a');
            $linkAttribute = ArrayHelper::remove($linkOptions, 'urlAttribute', 'href');
            $linkOptions[$linkAttribute] = Url::to($item['url']);
            $iconHtml = '';

            if ($this->active === $item['__id']) {
                Html::addCssClass($linkOptions, $this->activeCssClass);
            }

            if (!empty($item['icon'])) {
                $iconHtml = Icon::show($item['icon'], ArrayHelper::getValue($item, 'iconOptions', []));
            }

            if ($this->hideLabel && !isset($linkOptions['title'])) {
                $linkOptions['title'] = $item['label'];
            }

            $content = isset($item['content']) ? $item['content'] : null;

            $itemHtml .= Html::tag($linkTag, $iconHtml . (!$this->hideLabel ? $item['label'] : '') . $content, $linkOptions);

            if (isset($item['items'])) {
                $subMenuOptions = ArrayHelper::merge($this->subMenuOptions, $item['subMenuOptions']);
                $subMenuTag = ArrayHelper::remove($subMenuOptions, 'tag', 'ul');
                $itemHtml .= Html::tag($subMenuTag, $this->renderItems($item['items']), $subMenuOptions);
            }

            $itemOptions = ArrayHelper::merge($this->itemOptions, $item['options']);

            if (isset($item['items'])) {
                Html::addCssClass($itemOptions, $this->hasChildrenClass);
            }

            if ($itemOptions === false) {
                $itemsHtml .= $itemHtml;
            } else {
                $itemOptions['data-menu-id'] = $item['__id'];
                $itemTag = ArrayHelper::remove($itemOptions, 'tag', 'li');
                $itemsHtml .= Html::tag($itemTag, $itemHtml, $itemOptions);
            }

        }

        return $itemsHtml;
    }
}