<?php namespace modules\crm\widgets\inputs;

// "Keep the essence of your code, code isn't just a code, it's an art." -- Rifan Firdhaus Widigdo
use modules\crm\models\Customer;
use modules\ui\widgets\inputs\Select2Input;
use Yii;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\web\JsExpression;

/**
 * @author Rifan Firdhaus Widigdo <rifanfirdhaus@gmail.com>
 */
class CustomerInput extends Select2Input
{
    public $type;
    public $url = ['/crm/admin/customer/auto-complete'];
    public $allowAdd = false;
    public $inputWrapperOptions = [];
    public $addButtonOptions = [];

    /**
     * @return array
     */
    public function buildUrl()
    {
        $url = $this->url;
        $queryableAttributes = ['type'];

        foreach ($queryableAttributes AS $attribute) {
            if (!is_null($this->{$attribute}) && $this->{$attribute} !== '') {
                $url[$attribute] = $this->{$attribute};
            }
        }

        return $url;
    }

    public function run()
    {
        $result = parent::run(); // TODO: Change the autogenerated stub

        if ($this->allowAdd) {
            $addButtonOptions = ArrayHelper::merge($this->addButtonOptions, [
                'data-lazy-modal' => 'customer-form-modal',
                'data-lazy-container' => '#main-container',
                'data-lazy-modal-options' => [
                    'pushState' => false,
                ],
            ]);

            $button = Html::a(Yii::t('app', 'Add New'), ['/crm/admin/customer/add'], $addButtonOptions);
            $buttonWrap = Html::tag('div', $button, [
                'class' => 'flex-shrink-0',
            ]);
            $or = Html::tag('div', Yii::t('app', 'or'), [
                'class' => 'mx-2',
            ]);

            $fetchUrl = Url::to($this->buildUrl());

            $js = /** @lang JavaScript */
                "$('#{$this->addButtonOptions['id']}').on('lazyLink.go',function(e,container){
                  container.\$modalBody.on('lazy.loaded', function(e,data){
                      if(data.id){
                        $.ajax({
                          url: '{$fetchUrl}',
                          data: {id: data.id},
                          success: function(data){
                            var option = new Option(data.text,data.id,false,false);
                            
                            console.log(option,data,$('#{$this->options['id']}'));
                            
                            $('#{$this->options['id']}').append(option)
                              .val(data.id)
                              .trigger('change')
                              .trigger({
                                type: 'select2:select',
                                params: {data: data}
                              });
                          }
                        })
                      }
                  })
                })";

            $this->view->registerJs($js);

            return Html::tag('div', $result . $or . $buttonWrap, $this->inputWrapperOptions);
        }

        return $result;
    }

    /** @inheritdoc */
    public function normalize()
    {
        $this->jsOptions['ajax'] = [
            'url' => Url::to($this->buildUrl()),
            'data' => new JsExpression("function (params) {return {'q': params.term,page: params.page};}"),
        ];

        $this->jsOptions['templateResult'] = new JsExpression(
        /** @lang JavaScript */
            "function(data){
                if(data && data.contact_name){
                    var state = $('<div class=\"d-flex align-items-center\"><span class=\"icon mr-2 icons8-size\"></span><div><div class=\"align-middle\">'+data.text+'</div><small class=\"text-muted\">'+data.contact_name+'</small></div></div>');
                    
                    if(!data.contact_name){
                      state.find('small').hide();
                    }else{
                        if(data.type === 'P'){
                          state.find('.icon').addClass('icons8-contacts');
                        }else{
                          state.find('.icon').addClass('icons8-business-building');
                        }
                    }
                    
                    return state;
                }
                
                return data.text;
            }"
        );

        if (!$this->selected) {
            $this->selected = function ($value, $select2) {
                if ($select2->multiple) {
                    is_array($value) || ($value = explode(',', $value));

                    return Customer::find()->andWhere(['id' => $value])->map('id', 'name');
                }

                $model = Customer::find()->andWhere(['id' => $value])->one();

                if ($model) {
                    return [$value => $model->name];
                }
            };
        }

        if ($this->allowAdd) {
            Html::addCssClass($this->inputWrapperOptions, ['widget' => 'd-flex align-items-center w-100']);
            Html::addCssClass($this->addButtonOptions, ['button' => 'btn btn-outline-secondary']);

            $this->addButtonOptions['id'] = $this->getRealId() . '-add-button-' . $this->view->uniqueId;

            if (!isset($this->prompt)) {
                $this->prompt = Yii::t('app', 'Select existing {object}', [
                    'object' => Yii::t('app', 'Customer'),
                ]);
            }
        }

        parent::normalize();
    }
}